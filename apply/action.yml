name: 'Terraform apply'
description: >-
  Runs the Terraform apply command in the given infrastructure directory. This includes the installation of the Terraform CLI.
inputs:
  resource-group:
    description: 'The name of the resource group containing the storage account for the Terraform backend configuration.'
    required: true
  storage-account:
    description: 'The name of the storage account containing the Terraform backend configuration.'
    required: true
  container:
    description: 'The name of the Blob Storage container containing the Terraform backend configuration.'
    required: true
  state-file:
    description: 'The name of the Terraform state file.'
    required: true
  infra-directory:
    description: 'The path to the Terraform source directory.'
    required: true
  terraform-version:
    description: 'The version of Terraform to install. Defaults to latest.'
    required: false
    default: 'latest'
  lock-timeout:
    description: >-
      The duration Terraform will wait to acquire a state lock during an init or apply.
      The format has to follow the Terraform CLIs requirement of a number followed by a unit.
      Defaults to 10m.
    required: false
    default: '10m'

runs:
  using: 'composite'
  steps:
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
      with:
        terraform_version: ${{ inputs.terraform-version }}
        terraform_wrapper: false
    - name: Terraform init
      id: init
      env:
        TF_IN_AUTOMATION: true
      shell: bash
      working-directory: ${{ inputs.infra-directory }}
      run: |
        terraform init \
        -backend-config="resource_group_name=${{ inputs.resource-group }}" \
        -backend-config="storage_account_name=${{ inputs.storage-account }}" \
        -backend-config="container_name=${{ inputs.container }}" \
        -backend-config="key=${{ inputs.state-file }}" \
        -input=false \
        -lock-timeout=${{ inputs.lock-timeout }}
    - name: Terraform Apply
      id: apply
      env:
        TF_IN_AUTOMATION: true
      shell: bash
      working-directory: ${{ inputs.infra-directory }}
      run: terraform apply -auto-approve -input=false -lock-timeout=${{ inputs.lock-timeout }}
